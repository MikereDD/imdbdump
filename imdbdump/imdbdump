#!/bin/bash -
#===============================================================================
#
FILE=imdbdump
VER=0.4a
#
#         USAGE: ./imdbdump
#
#   DESCRIPTION: Bash script to search and dump IMDb info.
#
#       OPTIONS: Help = -h
#  REQUIREMENTS: Elinks, awk, cat, sed, grep, egrep, uniq, head, cut and sort.
#          BUGS: ---
#         NOTES: This script is a modified version imdbmoviefetcher, made to use Elinks instead of Lynx.
#                While also working to add new features like the ratings bar and eventually a plug for
#                miNfo 2. The old and semi broken miNfo can be found at https://github.com/dumbterminal/DT-miNfo
#                imdbmoviefetcher written by Unni unnikrishnan.a@gmail.com
#        AUTHOR: Mike Redd (MikereDD), mikeredd@mobileinfern.us
#  ORGANIZATION: Dumb Terminal Team
#       CREATED: 07/21/2012 06:20:12 PDT
#      REVISION: 06/22/2014 16:26:43 PD
#===============================================================================
shopt -s -o nounset

### Start Global variable declarations
declare -rx GITREPO="https://github.com/MikereDD/imdbdump.git"
declare -rx SCRIPT=${0##*/}
declare -rx VERSION="${VER}"
declare URL
declare TITLE
declare YEAR
declare RATING
declare PLOT
declare MOVIE
declare POSTER=0
declare PARSEABLE=0
declare SIMILAR=1
declare DIRECTOR
declare GENRE
declare CAST
declare POSTERURL
declare POSTERFILE
declare FILE
declare VER
declare -rx TMPFILE=$HOME/tmp/imdbdump/imdbdump.$$
declare -rx PLOTFILE=$HOME/tmp/imdbdump/plot.$$.html
declare -rx ELINKS=`which elinks`
declare -rx AWK=`which awk`
declare -rx CAT=`which cat`
declare -rx SED=`which sed`
declare -rx EGREP=`which egrep`
declare -rx GREP=`which grep`
declare -rx UNIQ=`which uniq`
declare -rx HEAD=`which head`
declare -rx SORT=`which sort`
declare -rx CUT=`which cut`
declare -rx TR=`which tr`
declare SWITCH
declare -r OPTSTRING=":hvpmst:"
declare -i INEEDCOLOR
declare TITLECOLOR="White"
declare DATACOLOR="White"
declare LINKCOLOR="White"
declare FILECOLOR="Red"
declare VERCOLOR="Cyan"
declare COLOR_START=""
declare COLOR_END=""
declare CONFFILE="/etc/imdbdump.conf"
### End Global

### Start tmp check
if [ ! -d $HOME/tmp/imdbdump/ ]
then
    echo " We need to create a tmp directory for imdbdump"
    echo "imdbdump uses $HOME/tmp/imdbdump/ by default"
    echo " Creating tmp directory now."
    mkdir -p $HOME/tmp/imdbdump/
fi
### End tmp check

### Start Config
if [ -f $HOME/.config/imdbdump.conf ]; then
    CONFFILE=$HOME/.config/imdbdump.conf
fi
if [ ! -f $CONFFILE ]
then
    echo "$CONFFILE not found, please create it."
    exit 192
fi
### End Config

### Start Color
if [ -f $CONFFILE ]
then
    declare COLOR_START='\033['
    declare COLOR_END='\033[0m'
    . $CONFFILE
fi

getcolor()
{
  COMPONENT=$1
  VAR=$2
  case $COMPONENT in
  Black) eval ${VAR}_CODE=30
        eval ${VAR}_MODE=0
        ;;
  Red)eval ${VAR}_CODE=31
      eval ${VAR}_MODE=0
      ;;
  Green)eval ${VAR}_CODE=32
      eval ${VAR}_MODE=0
     ;;
  Yellow)eval ${VAR}_CODE=33
      eval ${VAR}_MODE=0
  ;;
  Blue)eval ${VAR}_CODE=34
      eval ${VAR}_MODE=0
  ;;
  Purple)eval ${VAR}_CODE=35
      eval ${VAR}_MODE=0
  ;;
  Cyan)eval ${VAR}_CODE=36
      eval ${VAR}_MODE=0
  ;;
  Gray)eval ${VAR}_CODE=37
      eval ${VAR}_MODE=0
  ;;
  DGray)eval ${VAR}_CODE=30
      eval ${VAR}_MODE=1
  ;;
  DRed)eval ${VAR}_CODE=31
      eval ${VAR}_MODE=1
  ;;
  DGreen)eval ${VAR}_CODE=32
      eval ${VAR}_MODE=1
  ;;
  DYellow)eval ${VAR}_CODE=33
      eval ${VAR}_MODE=1
  ;;
  DBlue)eval ${VAR}_CODE=34
      eval ${VAR}_MODE=1
  ;;
  DPurple)eval ${VAR}_CODE=35
      eval ${VAR}_MODE=1
  ;;
  DCyan)eval ${VAR}_CODE=36
      eval ${VAR}_MODE=1
  ;;
  White)eval ${VAR}_CODE=37
      eval ${VAR}_MODE=1
  ;;
  *)eval ${VAR}_CODE=37
  eval ${VAR}_MODE=0
  ;;
  esac
}

if [ $INEEDCOLOR -eq 1 ]
then
  getcolor $VERCOLOR VERCOLOR
  getcolor $FILECOLOR FILECOLOR
  getcolor $TITLECOLOR TITLECOLOR
  getcolor $DATACOLOR DATACOLOR
  getcolor $LINKCOLOR LINKCOLOR
else
  VERCOLOR=""
  FILECOLOR=""
  TITLECOLOR=""
  DATACOLOR=""
  LINKCOLOR=""
fi
### End Colors

### Start Input Arguments/ Parametrs
if [ $# -eq 0 ]
then
    printf "%s -h for more information\n" "$SCRIPT"
exit 192
fi
while getopts "$OPTSTRING" SWITCH;do
    case "$SWITCH" in
h) cat << EOF
   $SCRIPT [option] [arg]

   Options :
   -v : imdbdump version
   -h : display help
   -t [arg] : Pass the movie title as argument. It is recommended to quote the name as shown in the example below
   -p : Download movie poster. Use it with -t option.
   -s : Do not show similar titles.
   -m : Output in machine-readable format, easy for subsequent parsing. Use it with -t option.

   Example :
   $SCRIPT -t "evil dead"

   Git repo at $GITREPO

EOF
   exit 0
    ;;
t) MOVIE="$OPTARG"
    ;;
p) POSTER="1"
    ;;
s) SIMILAR="0"
    ;;
m) PARSEABLE="1"
   INEEDCOLOR="0"
    ;;
v) printf "IMDbdump version %s.\nBugs, Feature requests etc : %s\n" "$VERSION" "$GITREPO"
   exit 0
   ;;
\?) printf "%s\n" "Invalid option. use $SCRIPT -h for more information"
    exit 192
    ;;
*) printf "%s\n" "Invalid argument. use $SCRIPT -h for more information"
   exit 192
    ;;
esac
done

[[ ${MOVIE:-unset} == 'unset' || -z $MOVIE ]] && { printf "Invalid input. Execute %s -h for more information\n" "$SCRIPT";exit 192;}

#functions
printnofound() {
    printf "There is no $1 command. Please install it\n"
}
sancheck() {
BINARY=$1
if [ ! -x "$BINARY" ]
then
    printnofound $BINARY >&2
    exit 192
fi
}
### End Input

### Start Sanity checks
if [ -z "$BASH" ]
then
    printf "This script is written for bash. Please run this under bash\n" >&2
    exit 192
fi
sancheck $ELINKS
sancheck $AWK
sancheck $CAT
sancheck $EGREP
sancheck $GREP
sancheck $UNIQ
sancheck $HEAD
sancheck $SED
sancheck $SORT
sancheck $TR
sancheck $CUT
### End Sanity Check

### Replace Special Characters in the Title Name Argument
MOVIE=`echo $MOVIE | $SED -r 's/  */\+/g;s/\&/%26/g;s/\++$//g'`

### Search the Title in Google
$ELINKS -no-numbering --source "http://www.google.com/search?hl=en&q=$MOVIE+imdb" > $TMPFILE 2> /dev/null

### Check if elinks is successful
if [ $? -ne 0 ]
then
    printf "Connection to site failed...Please check your internet connection\n"
    exit 192
fi
### Get IMDB URL for the film
URL=`$EGREP -o "http://www.imdb.com/title/tt[0-9]*/" $TMPFILE | $HEAD -1`
### Get similar titles
SIMILARTITLES=`$EGREP -o "<a[^>]+>[^<]*(<b>[^<|^(imdb)]+</b>)*[^<]*<b>[^<]*</b>[^\(|^<]*\([0-9]+\)[^-]+-[^<]*<b>IMDb</b>" $TMPFILE | $GREP "www.imdb.com" | $SORT | $UNIQ | $SED 's/- <b>IMDb<\/b>//g' | $SED 's/<[^>]*>//g'`

### Get the details from movie page
$ELINKS -source  ${URL} > $TMPFILE;
if [ $? -ne 0 ]
then
    printf "Connection to site failed...Please check your internet connection\n"
    exit 192
fi

### Extract Year & Title
YEAR=`$CAT $TMPFILE | $SED -n '/<h1.*>/,/<\/h1>/p' | $SED -n '/<span class="nobr".*>/,/<\/span>/p' | $SED '/^$/d;s/<[^>]*>//g;s/(//g;s/)//g' | $SED 's/&ndash;/ - /g'| $TR -d ' ' | $TR '\n' ' ' | $CUT -f2 -d '>'`
TITLE=`$CAT $TMPFILE | $SED -n '/<h1.*>/,/<\/h1>/p' | $SED -n 's/.*itemprop="name">//;s/<.*//p' | $TR -s ' '| $TR '\n' ' ' | $CUT -f1 -d '>'`

### Extract Poster Details
POSTERURL=`$GREP "Poster" $TMPFILE -A1 | $GREP -o http.*\.jpg | $CUT -f 1 -d "_"`
POSTERURL=${POSTERURL}jpg

if [ $POSTER -eq 1 ]
then
    POSTERFILE=`echo $TITLE | $SED "s/ /_/g"`
    $ELINKS -source $POSTERURL > ${POSTERFILE}.jpg 2> /dev/null
fi
### End Poster Details

### Start Get Plot
$SED -n '/.*<p itemprop="description">/,/<\/p>/p' $TMPFILE | $SED -n 's/.*itemprop="description">//;s/<.*//p' > $PLOTFILE
PLOT=`$ELINKS --dump $PLOTFILE | $SED 's/^  *//g '`
RATING=`$SED -n '/<span itemprop="ratingValue">/{ s/<[^>]*>//g;p;}' $TMPFILE  | $EGREP -o "[0-9]+\.[0-9]+/[0-9]+" | tail -1`
DIRECTOR=`$SED -n '/ *tt_ov_dr.*/,/<\/div>/{p;}' $TMPFILE | $SED -n 's/.*itemprop="name">//;s/<.*//p'| $UNIQ | $TR -s ' '| $TR '\n' ','| $SED 's/ ,//g;s/^,//;s/,$//'`
GENRE=`$GREP "ref_=tt_ov_inf" $TMPFILE| $GREP genre | $SED -n 's/.*itemprop="genre">//;s/<.*//p'| $UNIQ | $TR '\n' ','| $SED 's/^,//;s/,$//'`
CAST=`$SED -n '/ *tt_ov_st.*/,/<\/div>/{p;}' $TMPFILE | $SED -n 's/.*itemprop="name">//;s/<.*//p'| $UNIQ | $TR -s ' '| $TR '\n' ','| $SED 's/ ,//g;s/^,//;s/,$//' | $CUT -f1 -d '=' | $SED 's/itemprop//'`
### End Get Plot

### Start Rating bar
SRATE=`$SED -n '/<span itemprop="ratingValue">/{ s/<[^>]*>//g;p;}' $TMPFILE  | $EGREP -o "[0-9]+\.[0-9]+/[0-9]+" | tail -1 | $CUT -f1 -d "/"`
if [ "$SRATE" == " " ]
then
    SRATE='0'
else
    SRATE=`$SED -n '/<span itemprop="ratingValue">/{ s/<[^>]*>//g;p;}' $TMPFILE  | $EGREP -o "[0-9]+\.[0-9]+/[0-9]+" | tail -1 | $CUT -f1 -d "/" | $CUT -f 1 -d "."`
fi

RBARS=$(expr $SRATE / 1)

case $RBARS in
    1)
        BAR='[\033[33m*\033[0m---------]'
        ;;
    2)
        BAR='[\033[33m**\033[0m--------]'
        ;;
    3)
        BAR='[\033[33m***\033[0m-------]'
        ;;
    4)
        BAR='[\033[33m****\033[0m------]'
        ;;
    5)
        BAR='[\033[33m*****\033[0m-----]'
        ;;
    6)
        BAR='[\033[33m******\033[0m----]'
        ;;
    7)
        BAR='[\033[33m*******\033[0m---]'
        ;;
    8)
        BAR='[\033[33m********\033[0m--]'
        ;;
    9)
        BAR='[\033[33m*********\033[0m-]'
        ;;
    10)
        BAR='[\033[33m**********\033[0m]'
        ;;
    *)
        BAR='[----------]'
esac
### End Rating Bar

### Start Color Tag
if [ $INEEDCOLOR -eq 1 ]
then
    VER_COLOR_TAG="${FILECOLOR_MODE};${FILECOLOR_CODE}m"
    FILE_COLOR_TAG="${FILECOLOR_MODE};${FILECOLOR_CODE}m"
    TITLE_COLOR_TAG="${TITLECOLOR_MODE};${TITLECOLOR_CODE}m"
    DATA_COLOR_TAG="${DATACOLOR_MODE};${DATACOLOR_CODE}m"
    LINK_COLOR_TAG="${LINKCOLOR_MODE};${LINKCOLOR_CODE}m"
else
    VER_COLOR_TAG=""
    FILE_COLOR_TAG=""
    TITLE_COLOR_TAG=""
    DATA_COLOR_TAG=""
    LINK_COLOR_TAG=""
fi
### End Color Tag

### Start Parseable
if [ $PARSEABLE -eq 1 ]
then
    PLOT=`echo $PLOT | $TR -d '\n'`
fi
### End Parseable

### Start Printing everything
printf "\n${COLOR_START}${FILE_COLOR_TAG}$FILE${COLOR_END}   : ${COLOR_START}${VER_COLOR_TAG}$VER${COLOR_END}\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Title${COLOR_END}      : ${COLOR_START}${DATA_COLOR_TAG}$TITLE${COLOR_END}\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Year${COLOR_END}       : ${COLOR_START}${DATA_COLOR_TAG}$YEAR${COLOR_END}\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Rating${COLOR_END}     : ${COLOR_START}${DATA_COLOR_TAG}$RATING${COLOR_END} $BAR\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Director${COLOR_END}   : ${COLOR_START}${DATA_COLOR_TAG}$DIRECTOR${COLOR_END}\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Genres${COLOR_END}     : ${COLOR_START}${DATA_COLOR_TAG}$GENRE${COLOR_END}\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Cast${COLOR_END}       : ${COLOR_START}${DATA_COLOR_TAG}$CAST${COLOR_END}\n"
#printf "${COLOR_START}${TITLE_COLOR_TAG}Plot${COLOR_END} : ${COLOR_START}${DATA_COLOR_TAG}%s${COLOR_END}\n" "$PLOT"
printf "${COLOR_START}${TITLE_COLOR_TAG}Plot${COLOR_END}       : ${COLOR_START}${DATA_COLOR_TAG}%s${COLOR_END}\n" "$PLOT"
printf "\n${COLOR_START}${TITLE_COLOR_TAG}IMDbURL${COLOR_END}    : ${COLOR_START}${LINK_COLOR_TAG}${URL}${COLOR_END}\n"
printf "${COLOR_START}${TITLE_COLOR_TAG}Poster URL${COLOR_END} : ${COLOR_START}${LINK_COLOR_TAG}${POSTERURL}${COLOR_END}\n"
### End Print

### Start Similar & Parseable
if [ $SIMILAR -eq 1 ]
then
    if [ $PARSEABLE -eq 0 ]
    then
        printf "${COLOR_START}${TITLE_COLOR_TAG}\n==============Other similar Titles=============${COLOR_END}\n\n"
        if [ -z "$SIMILARTITLES" ]
        then
            SIMILARTITLES="Nothing interesting here"
        fi
        printf "${COLOR_START}${DATA_COLOR_TAG}%s${COLOR_END}\n" "$SIMILARTITLES"
        printf "\n${COLOR_START}${TITLE_COLOR_TAG}Use above key words to know more about them${COLOR_END}\n"
    else
        if [ ! -z "$SIMILARTITLES" ]
        then
            printf "%s" "$SIMILARTITLES" > $TMPFILE.sim
            cat $TMPFILE|xargs -i echo "Similarities : "{}
            rm -f $TMPFILE.sim > /dev/null
        fi
    fi
fi
### End Similar & Parseable

### Start Clean Up
rm $TMPFILE > /dev/null
rm $PLOTFILE > /dev/null
### End Clean Up

exit 0
