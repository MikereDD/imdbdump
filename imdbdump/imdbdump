#!/bin/bash - 
#===============================================================================
#
FILE=imdbdump
VER=0.3b
#
#         USAGE: ./imdbdump 
#
#   DESCRIPTION: Bash script to search and dump IMDb info.
#
#       OPTIONS: Help = -h
#  REQUIREMENTS: Elinks, awk, cat, sed, grep, egrep, uniq, head, cut and sort.
#          BUGS: ---
#         NOTES: This script is a modified version imdbmoviefetcher, made to use Elinks instead of Lynx.
#                While also working to add new features like the ratings bar and eventually a plug for
#                miNfo 2. The old and semi broken miNfo can be found at https://github.com/dumbterminal/DT-miNfo
#                imdbmoviefetcher written by Unni unnikrishnan.a@gmail.com
#        AUTHOR: Mike Redd (MikereDD), mikeredd@mobileinfer n.us
#  ORGANIZATION: Dumb Terminal Team
#       CREATED: 07/21/2012 06:20:12 PDT
#      REVISION: 10/13/2012 07:56:14 PD
#===============================================================================
shopt -s -o nounset

#Global variable declarations
declare -rx GITREPO="https://github.com/MikereDD/imdbdump.git"
declare -rx SCRIPT=${0##*/}
declare -rx VERSION="${VER}"
declare URL
declare TITLE
declare YEAR
declare RATING
declare PLOT
declare MOVIE
declare POSTER=0
declare PARSEABLE=0
declare SIMILAR=1
declare DIRECTOR
declare GENRE
declare CAST
declare POSTERURL
declare POSTERFILE
declare FILE
declare VER
declare -rx TMPFILE=$HOME/tmp/imdbdump/imdbdump.$$
declare -rx PLOTFILE=$HOME/tmp/imdbdump/plot.$$.html
declare -rx ELINKS=`which elinks`
declare -rx AWK=`which awk`
declare -rx CAT=`which cat`
declare -rx SED=`which sed`
declare -rx EGREP=`which egrep`
declare -rx GREP=`which grep`
declare -rx UNIQ=`which uniq`
declare -rx HEAD=`which head`
declare -rx SORT=`which sort`
declare -rx CUT=`which cut`
declare SWITCH
declare -r OPTSTRING=":hvt:"
declare -i INEEDCOLOR
declare TITLECOLOR="White"
declare DATACOLOR="White"
declare LINKCOLOR="White"
declare FILECOLOR="Red"
declare VERCOLOR="Cyan"
declare CONFFILE="/etc/imdbdump.conf"

# create tmp directory to work in
if [ ! -d $HOME/tmp/imdbdump/ ]; then
    echo " We need to create a tmp directory for imdbdump"
    echo "imdbdump uses $HOME/tmp/imdbdump/ by default"
    echo " Creating tmp directory now."
    mkdir -p $HOME/tmp/imdbdump/
fi

#Colors
if [ -f $HOME/.config/imdbdump.conf ]
then
CONFFILE=$HOME/.config/imdbdump.conf
fi
if [ ! -f $CONFFILE ]
then
echo "$CONFFILE not found, please create it."
exit 192
fi
INEEDCOLOR=0
. $CONFFILE
getcolor()
{
COMPONENT=$1
VAR=$2
case $COMPONENT in
Black) eval ${VAR}_CODE=30
      eval ${VAR}_MODE=0
      ;;
Red)eval ${VAR}_CODE=31
    eval ${VAR}_MODE=0
    ;;
Green)eval ${VAR}_CODE=32
    eval ${VAR}_MODE=0
   ;;
Yellow)eval ${VAR}_CODE=33
    eval ${VAR}_MODE=0
;;
Blue)eval ${VAR}_CODE=34
    eval ${VAR}_MODE=0
;;
Purple)eval ${VAR}_CODE=35
    eval ${VAR}_MODE=0
;;
Cyan)eval ${VAR}_CODE=36
    eval ${VAR}_MODE=0
;;
Gray)eval ${VAR}_CODE=37
    eval ${VAR}_MODE=0
;;
DGray)eval ${VAR}_CODE=30
    eval ${VAR}_MODE=1
;;
DRed)eval ${VAR}_CODE=31
    eval ${VAR}_MODE=1
;;
DGreen)eval ${VAR}_CODE=32
    eval ${VAR}_MODE=1
;;
DYellow)eval ${VAR}_CODE=33
    eval ${VAR}_MODE=1
;;
DBlue)eval ${VAR}_CODE=34
    eval ${VAR}_MODE=1
;;
DPurple)eval ${VAR}_CODE=35
    eval ${VAR}_MODE=1
;;
DCyan)eval ${VAR}_CODE=36
    eval ${VAR}_MODE=1
;;
White)eval ${VAR}_CODE=37
    eval ${VAR}_MODE=1
;;
*)eval ${VAR}_CODE=37
eval ${VAR}_MODE=0
;;
esac
}
if [ $INEEDCOLOR -eq 1 ]
then
getcolor $TITLECOLOR TITLECOLOR
getcolor $DATACOLOR DATACOLOR
getcolor $LINKCOLOR LINKCOLOR
getcolor $FILECOLOR FILECOLOR
getcolor $VERCOLOR VERCOLOR
else
TITLECOLOR="White"
DATACOLOR="White"
LINKCOLOR="White"
FILECOLOR="Red"
VERCOLOR="Cyan"
getcolor $TITLECOLOR TITLECOLOR
getcolor $DATACOLOR DATACOLOR
getcolor $LINKCOLOR LINKCOLOR
getcolor $FILECOLOR FILECOLOR
getcolor $VERCOLOR VERCOLOR
fi
#End Colors

#Input Arguments/ Parametrs
if [ $# -eq 0 ];then
printf "%s -h for more information\n" "$SCRIPT"
exit 192
fi
while getopts "$OPTSTRING" SWITCH;do
case "$SWITCH" in
h) cat << EOF
   $SCRIPT [option] [arg]

   Options :
   -v : imdbdump version
   -h : display help
   -t [arg] : Pass the movie title as argument. It is recommended to quote the name as shown in the example below 

   Example :
   $SCRIPT -t "evil dead"

   Git repo at $GITREPO

EOF
   exit 0
    ;;
t) MOVIE="$OPTARG"
    ;;
p) POSTER="1"
    ;;
s) SIMILAR="0"
    ;;
m) PARSEABLE="1"
   INEEDCOLOR="0"
    ;;
v) printf "IMDbdump version %s.\nBugs, Feature requests etc : %s\n" "$VERSION" "$GITREPO"
   exit 0
   ;;
\?) printf "%s\n" "Invalid option. use $SCRIPT -h for more information"
    exit 192
    ;;
*) printf "%s\n" "Invalid argument. use $SCRIPT -h for more information"
   exit 192
    ;;
esac
done
[[ -z $MOVIE ]] && { printf "%s -h for more information\n" "$SCRIPT";exit 192;}
#functions
printnofound() {
printf "There is no $1 command. Please install it\n"
}
sancheck() {
BINARY=$1
if [ ! -x "$BINARY" ]
then
printnofound $BINARY >&2
exit 192
fi
}
#End A / P

#Sanity checks
if [ -z "$BASH" ]
then
printf "This script is written for bash. Please run this under bash\n" >&2
exit 192
fi
sancheck $ELINKS
sancheck $AWK
sancheck $CAT
sancheck $EGREP
sancheck $GREP
sancheck $UNIQ
sancheck $HEAD
sancheck $SED
sancheck $SORT
#End Sanity Check

#Replace Special Characters in the Title Name Argument
MOVIE=`echo $MOVIE | sed -r 's/  */\+/g;s/\&/%26/g;s/\++$//g'`

#Search the Title in Google
$ELINKS -no-numbering --source "http://www.google.com/search?hl=en&q=$MOVIE+imdb" > $TMPFILE 2> /dev/null

#Check if elinks is successful
if [ $? -ne 0 ]
then
printf "Connection to site failed...Please check your internet connection\n"
exit 192
fi
#Get IMDB URL for the film
URL=`$EGREP -o "http://www.imdb.com/title/tt[0-9]*/" $TMPFILE | $HEAD -1`
#Get similar titles
SIMILARTITLES=`$EGREP -o "<a[^>]+>[^<]*(<em>[^<|^(imdb)]+</em>)*[^<]*<em>[^<]*</em>[^\(|^<]*\([0-9]+\)[^-]+-[^<]*<em>IMDb</em>" $TMPFILE | grep "www.imdb.com" | sort | uniq | sed 's/- <em>IMDb<\/em>//g' | sed 's/<[^>]*>//g'`
#get the details from movie page
$ELINKS -source  ${URL} > $TMPFILE;
if [ $? -ne 0 ]
then
printf "Connection to site failed...Please check your internet connection\n"
exit 192
fi

#extract data
YEAR=`$CAT $TMPFILE | $SED -n '/<h1.*>/,/<\/h1>/p' | $SED '1d;$d;/^$/d;s/<[^>]*>//g;s/(//g;s/)//g' | $EGREP -o "[0-9][0-9][0-9][0-9]"`
TITLE=`$CAT $TMPFILE | $SED -n '/<h1.*>/,/<\/h1>/p' | $SED '1d;$d;/^$/d;s/<[^>]*>//g;s/(//g;s/)//g' | $HEAD -1 | $SED "s/\&#x27\;/\'/g" ` #| $ELINKS -dump `

POSTERURL=`grep "Poster" $TMPFILE -A1|grep -o http.*\.jpg|cut -f 1 -d "_"`
POSTERURL=${POSTERURL}jpg

if [ $POSTER -eq 1 ]
then
POSTERFILE=`echo $TITLE | $SED "s/ /_/g"`
  $LYNX -connect_timeout=10 --source $POSTERURL > ${POSTERFILE}.jpg 2> /dev/null
fi

#Get the plot in a html file
$SED -n '/<h1.*>/,/<\/p>/p' $TMPFILE | $SED -n '/<p>/,/<\/p>/{ s/<[^>]*>//g;p;}' | $SED 's/See full summary.*//g' > $PLOTFILE 
PLOT=`$ELINKS --dump $PLOTFILE | $SED 's/^  *//g '`
RATING=`$SED -n '/<span itemprop="ratingValue">/{ s/<[^>]*>//g;p;}' $TMPFILE  | $EGREP -o "[0-9]+\.[0-9]+/[0-9]+" | tail -1`
DIRECTOR=`$SED -n '/ *Director[s]*:.*/,/ *Writer[s]*:.*/{p;}' $TMPFILE | $SED '1d;$d' | tr '\n' ' ' | $SED 's/<[^>]*>//g' | $SED 's/^ *//g;s/ *$//g'`
GENRE=`$SED -n '/genre/p' $TMPFILE | $EGREP -o '<a  *.*href="/genre/[a-zA-Z][a-z]*"[^>]*>[^<]*</a>' | $SED 's/<[^>]*>//g;s/&nbsp\;//g;s/ *Genres *[0-9][0-9]* *min-//g;s/|/,/g' | $SED 's/[gG]enres//g;s/^  *//g' | $UNIQ | $HEAD -1`
CAST=`$SED -n '/.*Star[s]*:.*/,/<\/div>/{ s/<[^>]*>//g;s/Stars://g;p }' $TMPFILE | $SED -n '/^ *$/d;p' | tr '\n' ' ' | $SED 's/<[^>]*>//g'`

# Rating star bar
SRATE=`$SED -n '/<span itemprop="ratingValue">/{ s/<[^>]*>//g;p;}' $TMPFILE  | $EGREP -o "[0-9]+\.[0-9]+/[0-9]+" | tail -1 | $CUT -f1 -d "/"`
if [ "$SRATE" == " " ]; then
  SRATE='0'
else
  SRATE=`$SED -n '/<span itemprop="ratingValue">/{ s/<[^>]*>//g;p;}' $TMPFILE  | $EGREP -o "[0-9]+\.[0-9]+/[0-9]+" | tail -1 | $CUT -f1 -d "/" | $CUT -f 1 -d "."`
fi

RBARS=$(expr $SRATE / 1)

case $RBARS in
#
        1)
#
                BAR='[\033[33m*\033[0m---------]'
#
                ;;
#
        2)
#
                BAR='[\033[33m**\033[0m--------]'
#
                ;;
#
        3)
#
                BAR='[\033[33m***\033[0m-------]'
#
                ;;
#
        4)
#
                BAR='[\033[33m****\033[0m------]'
#
                ;;
#
        5)
#
                BAR='[\033[33m*****\033[0m-----]'
#
                ;;
#
        6)
#
                BAR='[\033[33m******\033[0m----]'
#
                ;;
#
        7)
#
                BAR='[\033[33m*******\033[0m---]'
#
                ;;
#
        8)
#
                BAR='[\033[33m********\033[0m--]'
#
                ;;
#
        9)
#
                BAR='[\033[33m*********\033[0m-]'
#
                ;;
#
        10)
#
                BAR='[\033[33m**********\033[0m]'
#
                ;;
#
        *)
#
                BAR='[----------]'
#
esac
#

if [ $INEEDCOLOR -eq 1 ]
then
TITLE_COLOR_TAG="${TITLECOLOR_MODE};${TITLECOLOR_CODE}m"
  DATA_COLOR_TAG="${DATACOLOR_MODE};${DATACOLOR_CODE}m"
  LINK_COLOR_TAG="${LINKCOLOR_MODE};${LINKCOLOR_CODE}m"
else
TITLE_COLOR_TAG=""
  DATA_COLOR_TAG=""
  LINK_COLOR_TAG=""
fi

if [ $PARSEABLE -eq 1 ]
then
PLOT=`echo $PLOT | tr -d '\n'`
fi

#print everything
printf "\n\033[${FILECOLOR_MODE};${FILECOLOR_CODE}m$FILE\033[0m -  \033[${VERCOLOR_MODE};${VERCOLOR_CODE}m$VER\033[0m\n\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mTitle\033[0m    : \033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$TITLE\033[0m\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mIMDdURL\033[0m  : \033[${LINKCOLOR_MODE};${LINKCOLOR_CODE}m${URL}\033[0m\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mYear\033[0m     : \033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$YEAR\033[0m\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mRating\033[0m   : \033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$RATING\033[0m $BAR\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mDirector\033[0m : \033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$DIRECTOR\033[0m\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mGenres\033[0m   : \033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$GENRE\033[0m\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mCast\033[0m     : \033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$CAST\033[0m\n"
printf "\033[${TITLECOLOR_MODE};${TITLECOLOR_CODE}mPlot\033[0m     :\033[${DATACOLOR_MODE};${DATACOLOR_CODE}m$PLOT\n"

if [ $SIMILAR -eq 1 ]
then
if [ $PARSEABLE -eq 0 ]
  then
printf "${COLOR_START}${TITLE_COLOR_TAG}\n==============Other similar Titles=============${COLOR_END}\n\n"
    if [ -z "$SIMILARTITLES" ]
    then
SIMILARTITLES="Nothing interesting here"
    fi
printf "${COLOR_START}${DATA_COLOR_TAG}%s${COLOR_END}\n" "$SIMILARTITLES"
    printf "\n${COLOR_START}${TITLE_COLOR_TAG}Use above key words to know more about them${COLOR_END}\n"
  else
if [ ! -z "$SIMILARTITLES" ]
    then
printf "%s" "$SIMILARTITLES" > $TMPFILE.sim
      cat $TMPFILE|xargs -i echo "Similarities : "{}
      rm -f $TMPFILE > /dev/null
    fi
fi
fi

#Done. Now do cleanup
rm $TMPFILE > /dev/null
rm $PLOTFILE > /dev/null
exit 0
